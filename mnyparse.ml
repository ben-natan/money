type token =
  | FLOAT of (float)
  | IDENT of (string)
  | TRUE
  | FALSE
  | STRING of (string)
  | PLUS
  | MINUS
  | MULT
  | DIV
  | EQUAL
  | GREATER
  | SMALLER
  | GREATEREQUAL
  | SMALLEREQUAL
  | LPAREN
  | RPAREN
  | SEMICOLON
  | TWOSEMICOLONS
  | ARROW
  | COLON
  | COMMA
  | LBRACK
  | RBRACK
  | DOT
  | SET
  | FUN
  | WALLET
  | ASSET
  | TRANSAC
  | IF
  | THEN
  | ELSE
  | BUY
  | WITH
  | THROUGH
  | OF
  | REC
  | NOTEQUAL
  | EXCLAM
  | XOR
  | OR
  | AND
  | PERCENT

open Parsing;;
let _ = parse_error;;
# 2 "mnyparse.mly"
open Mnyast ;;

# 52 "mnyparse.ml"
let yytransl_const = [|
  259 (* TRUE *);
  260 (* FALSE *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* MULT *);
  265 (* DIV *);
  266 (* EQUAL *);
  267 (* GREATER *);
  268 (* SMALLER *);
  269 (* GREATEREQUAL *);
  270 (* SMALLEREQUAL *);
  271 (* LPAREN *);
  272 (* RPAREN *);
  273 (* SEMICOLON *);
  274 (* TWOSEMICOLONS *);
  275 (* ARROW *);
  276 (* COLON *);
  277 (* COMMA *);
  278 (* LBRACK *);
  279 (* RBRACK *);
  280 (* DOT *);
  281 (* SET *);
  282 (* FUN *);
  283 (* WALLET *);
  284 (* ASSET *);
  285 (* TRANSAC *);
  286 (* IF *);
  287 (* THEN *);
  288 (* ELSE *);
  289 (* BUY *);
  290 (* WITH *);
  291 (* THROUGH *);
  292 (* OF *);
  293 (* REC *);
  294 (* NOTEQUAL *);
  295 (* EXCLAM *);
  296 (* XOR *);
  297 (* OR *);
  298 (* AND *);
  299 (* PERCENT *);
    0|]

let yytransl_block = [|
  257 (* FLOAT *);
  258 (* IDENT *);
  261 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\004\000\004\000\005\000\007\000\007\000\007\000\
\006\000\006\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\008\000\008\000\008\000\008\000\008\000\008\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\000\000"

let yylen = "\002\000\
\002\000\002\000\006\000\006\000\010\000\004\000\001\000\002\000\
\002\000\002\000\003\000\000\000\003\000\005\000\003\000\000\000\
\007\000\005\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\040\000\044\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\045\000\000\000\
\000\000\037\000\035\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\008\000\000\000\000\000\010\000\
\036\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\038\000\046\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\029\000\030\000\
\031\000\000\000\000\000\000\000\006\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\003\000\000\000\
\004\000\000\000\000\000\000\000\000\000\017\000\000\000\005\000"

let yydgoto = "\002\000\
\020\000\021\000\022\000\037\000\023\000\040\000\031\000\024\000\
\025\000"

let yysindex = "\001\000\
\069\255\000\000\000\000\000\000\000\000\000\000\000\000\124\255\
\124\255\108\255\069\255\001\255\255\254\002\255\239\254\108\255\
\108\255\108\255\124\255\000\000\247\254\201\255\000\000\124\255\
\223\254\000\000\000\000\251\254\000\000\248\254\246\254\004\255\
\013\255\253\254\000\000\237\254\000\000\006\255\015\255\000\000\
\000\000\000\000\147\255\147\255\147\255\147\255\147\255\147\255\
\147\255\147\255\147\255\040\255\147\255\147\255\147\255\147\255\
\000\000\000\000\000\000\108\255\000\000\108\255\050\255\108\255\
\060\255\108\255\064\255\077\255\077\255\023\255\023\255\037\255\
\037\255\037\255\037\255\037\255\000\000\037\255\000\000\000\000\
\000\000\046\255\051\255\043\255\000\000\000\000\049\255\054\255\
\001\255\108\255\081\255\108\255\088\255\000\000\000\000\073\255\
\000\000\063\255\108\255\098\255\086\255\000\000\108\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\255\000\000\000\000\000\000\200\255\
\000\000\000\000\000\000\000\000\000\000\011\001\000\000\164\255\
\017\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\081\000\238\255\015\000\110\000\
\139\000\168\000\197\000\226\000\000\000\255\000\000\000\000\000\
\000\000\097\255\000\000\000\000\000\000\000\000\000\000\000\000\
\084\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\001\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\093\000\246\255\017\002\000\000\107\000\000\000\035\000\000\000\
\097\000"

let yytablesize = 585
let yytable = "\028\000\
\032\000\001\000\030\000\034\000\012\000\036\000\038\000\039\000\
\042\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\033\000\066\000\039\000\039\000\039\000\
\039\000\077\000\043\000\044\000\045\000\046\000\052\000\039\000\
\039\000\082\000\067\000\083\000\039\000\085\000\039\000\087\000\
\039\000\039\000\039\000\084\000\052\000\086\000\054\000\055\000\
\056\000\088\000\089\000\090\000\091\000\003\000\004\000\005\000\
\006\000\007\000\008\000\009\000\054\000\055\000\056\000\095\000\
\092\000\097\000\096\000\010\000\045\000\046\000\011\000\093\000\
\101\000\098\000\012\000\099\000\104\000\013\000\014\000\015\000\
\016\000\100\000\017\000\102\000\052\000\018\000\103\000\029\000\
\026\000\027\000\016\000\019\000\003\000\004\000\005\000\006\000\
\007\000\008\000\009\000\041\000\054\000\055\000\056\000\015\000\
\057\000\035\000\010\000\094\000\003\000\004\000\005\000\006\000\
\007\000\012\000\000\000\000\000\013\000\014\000\015\000\016\000\
\000\000\017\000\010\000\000\000\018\000\000\000\000\000\000\000\
\000\000\012\000\019\000\003\000\004\000\005\000\006\000\007\000\
\008\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\000\000\033\000\033\000\033\000\000\000\000\000\
\033\000\019\000\033\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\033\000\000\000\000\000\000\000\033\000\
\000\000\033\000\000\000\033\000\033\000\033\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\012\000\
\012\000\012\000\000\000\000\000\012\000\000\000\012\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\000\000\000\000\000\000\012\000\000\000\000\000\053\000\000\000\
\054\000\055\000\056\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\000\000\027\000\027\000\027\000\
\000\000\000\000\027\000\000\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\027\000\000\000\000\000\
\000\000\027\000\000\000\027\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\000\000\028\000\028\000\
\028\000\000\000\000\000\028\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\028\000\000\000\
\000\000\000\000\028\000\000\000\028\000\025\000\025\000\000\000\
\000\000\025\000\025\000\025\000\025\000\025\000\000\000\025\000\
\025\000\025\000\000\000\000\000\025\000\000\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\
\000\000\000\000\000\000\025\000\000\000\025\000\026\000\026\000\
\000\000\000\000\026\000\026\000\026\000\026\000\026\000\000\000\
\026\000\026\000\026\000\000\000\000\000\026\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\026\000\000\000\000\000\000\000\026\000\000\000\026\000\019\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\019\000\
\000\000\000\000\019\000\000\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\019\000\000\000\000\000\
\000\000\019\000\000\000\019\000\021\000\021\000\021\000\021\000\
\021\000\000\000\021\000\021\000\021\000\000\000\000\000\021\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\021\000\000\000\000\000\000\000\021\000\000\000\
\021\000\023\000\023\000\023\000\023\000\023\000\000\000\023\000\
\023\000\023\000\000\000\000\000\023\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\000\000\000\000\000\000\023\000\000\000\023\000\022\000\022\000\
\022\000\022\000\022\000\000\000\022\000\022\000\022\000\000\000\
\000\000\022\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\022\000\000\000\000\000\000\000\
\022\000\000\000\022\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\024\000\000\000\000\000\024\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\024\000\000\000\000\000\000\000\024\000\000\000\024\000\
\020\000\020\000\020\000\020\000\020\000\000\000\020\000\020\000\
\020\000\000\000\000\000\020\000\000\000\020\000\000\000\000\000\
\000\000\000\000\007\000\007\000\007\000\020\000\020\000\007\000\
\000\000\007\000\020\000\000\000\020\000\000\000\018\000\018\000\
\018\000\007\000\007\000\018\000\000\000\018\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\018\000\000\000\
\000\000\000\000\018\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\000\000\078\000\079\000\080\000\
\081\000"

let yycheck = "\010\000\
\002\001\001\000\002\001\002\001\022\001\016\000\017\000\018\000\
\018\001\043\001\016\001\020\001\023\001\010\001\002\001\019\001\
\036\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\037\001\031\001\021\001\022\001\023\001\
\024\001\002\001\006\001\007\001\008\001\009\001\024\001\031\001\
\032\001\060\000\036\001\062\000\036\001\064\000\038\001\066\000\
\040\001\041\001\042\001\010\001\024\001\002\001\040\001\041\001\
\042\001\002\001\021\001\017\001\026\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\040\001\041\001\042\001\090\000\
\032\001\092\000\002\001\015\001\008\001\009\001\018\001\034\001\
\099\000\002\001\022\001\019\001\103\000\025\001\026\001\027\001\
\028\001\035\001\030\001\002\001\024\001\033\001\017\001\011\000\
\008\000\009\000\023\001\039\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\019\000\040\001\041\001\042\001\023\001\
\024\000\015\000\015\001\089\000\001\001\002\001\003\001\004\001\
\005\001\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\255\255\030\001\015\001\255\255\033\001\255\255\255\255\255\255\
\255\255\022\001\039\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\255\255\255\255\
\021\001\039\001\023\001\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\036\001\
\255\255\038\001\255\255\040\001\041\001\042\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\016\001\
\017\001\018\001\255\255\255\255\021\001\255\255\023\001\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\036\001\255\255\255\255\038\001\255\255\
\040\001\041\001\042\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\255\255\255\255\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\036\001\255\255\038\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\255\255\255\255\021\001\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\255\255\255\255\036\001\255\255\038\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\255\255\255\255\021\001\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\036\001\255\255\038\001\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\255\255\255\255\021\001\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\255\255\255\255\036\001\255\255\038\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\255\255\255\255\021\001\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\036\001\255\255\038\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\036\001\255\255\
\038\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\255\255\255\255\021\001\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\036\001\255\255\038\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\255\255\
\255\255\021\001\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\036\001\255\255\038\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\255\255\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\036\001\255\255\038\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\255\255\255\255\021\001\255\255\023\001\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\031\001\032\001\021\001\
\255\255\023\001\036\001\255\255\038\001\255\255\016\001\017\001\
\018\001\031\001\032\001\021\001\255\255\023\001\036\001\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\255\255\255\255\036\001\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\255\255\053\000\054\000\055\000\
\056\000"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  EQUAL\000\
  GREATER\000\
  SMALLER\000\
  GREATEREQUAL\000\
  SMALLEREQUAL\000\
  LPAREN\000\
  RPAREN\000\
  SEMICOLON\000\
  TWOSEMICOLONS\000\
  ARROW\000\
  COLON\000\
  COMMA\000\
  LBRACK\000\
  RBRACK\000\
  DOT\000\
  SET\000\
  FUN\000\
  WALLET\000\
  ASSET\000\
  TRANSAC\000\
  IF\000\
  THEN\000\
  ELSE\000\
  BUY\000\
  WITH\000\
  THROUGH\000\
  OF\000\
  REC\000\
  NOTEQUAL\000\
  EXCLAM\000\
  XOR\000\
  OR\000\
  AND\000\
  PERCENT\000\
  "

let yynames_block = "\
  FLOAT\000\
  IDENT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 31 "mnyparse.mly"
                         (_1)
# 380 "mnyparse.ml"
               : Mnyast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Mnyast.expr) in
    Obj.repr(
# 31 "mnyparse.mly"
                                                   (_2)
# 387 "mnyparse.ml"
               : Mnyast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "mnyparse.mly"
                                          ( EAff (_2, _4, _6) )
# 396 "mnyparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "mnyparse.mly"
                                    ( EIf(_2, _4, _6) )
# 405 "mnyparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "mnyparse.mly"
                                                              ( EFunrec(_3, _6, _8, _10) )
# 415 "mnyparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "mnyparse.mly"
                           ( EFun(_2, _4) )
# 423 "mnyparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 39 "mnyparse.mly"
                   ( _1 )
# 430 "mnyparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asset) in
    Obj.repr(
# 40 "mnyparse.mly"
                  ( _2 )
# 437 "mnyparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'wallet) in
    Obj.repr(
# 41 "mnyparse.mly"
                    ( _2 )
# 444 "mnyparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'transac) in
    Obj.repr(
# 42 "mnyparse.mly"
                  ( _2 )
# 451 "mnyparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 46 "mnyparse.mly"
                     ( EAsset(_1, _3) )
# 459 "mnyparse.ml"
               : 'asset))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "mnyparse.mly"
                     ( EAsset(EFloat(1.), "GEN") )
# 465 "mnyparse.ml"
               : 'asset))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'wallet_assets) in
    Obj.repr(
# 51 "mnyparse.mly"
                                     ( EWallet(_2) )
# 472 "mnyparse.ml"
               : 'wallet))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'wallet_assets) in
    Obj.repr(
# 55 "mnyparse.mly"
                                            ( (_1,_3)::_5 )
# 481 "mnyparse.ml"
               : 'wallet_assets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "mnyparse.mly"
                       ( (_1,_3)::[] )
# 489 "mnyparse.ml"
               : 'wallet_assets))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "mnyparse.mly"
                       ( [] )
# 495 "mnyparse.ml"
               : 'wallet_assets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "mnyparse.mly"
                                            ( EBuy(_1, _3, _5, _7) )
# 505 "mnyparse.ml"
               : 'transac))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "mnyparse.mly"
                                            ( EBuy(_1, _3, _5, _5) )
# 514 "mnyparse.ml"
               : 'transac))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 68 "mnyparse.mly"
                                   ( EBinop ("=", _1, _3) )
# 522 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 69 "mnyparse.mly"
                                       ( EBinop("!=", _1, _3) )
# 530 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 70 "mnyparse.mly"
                                       ( EBinop (">", _1, _3) )
# 538 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 71 "mnyparse.mly"
                                            ( EBinop (">=", _1, _3) )
# 546 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 72 "mnyparse.mly"
                                       ( EBinop ("<", _1, _3) )
# 554 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 73 "mnyparse.mly"
                                            ( EBinop ("<=", _1, _3) )
# 562 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 74 "mnyparse.mly"
                                    ( EBinop ("+", _1, _3) )
# 570 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 75 "mnyparse.mly"
                                     ( EBinop ("-", _1, _3) )
# 578 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 76 "mnyparse.mly"
                                    ( EBinop ("*", _1, _3) )
# 586 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 77 "mnyparse.mly"
                                   ( EBinop ("/", _1, _3) )
# 594 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 78 "mnyparse.mly"
                                   ( EBinop("^", _1, _3) )
# 602 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 79 "mnyparse.mly"
                                   ( EBinop("||", _1, _3) )
# 610 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 80 "mnyparse.mly"
                                   ( EBinop("&&", _1, _3) )
# 618 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "mnyparse.mly"
                              ( EDot(_1, _3) )
# 626 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'application) in
    Obj.repr(
# 82 "mnyparse.mly"
                                    ( _1 )
# 633 "mnyparse.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'application) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 86 "mnyparse.mly"
                     ( EApp (_1, _2) )
# 641 "mnyparse.ml"
               : 'application))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 87 "mnyparse.mly"
                     ( EMonop("-", _2) )
# 648 "mnyparse.ml"
               : 'application))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 88 "mnyparse.mly"
                     ( EMonop("!", _2) )
# 655 "mnyparse.ml"
               : 'application))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 89 "mnyparse.mly"
                     ( EMonop("+", _2) )
# 662 "mnyparse.ml"
               : 'application))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    Obj.repr(
# 90 "mnyparse.mly"
                     ( EMonop("%", _1) )
# 669 "mnyparse.ml"
               : 'application))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 91 "mnyparse.mly"
               ( _1 )
# 676 "mnyparse.ml"
               : 'application))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 96 "mnyparse.mly"
                ( EFloat (_1) )
# 683 "mnyparse.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "mnyparse.mly"
              ( EBool (true) )
# 689 "mnyparse.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "mnyparse.mly"
              ( EBool (false) )
# 695 "mnyparse.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "mnyparse.mly"
              ( EString (_1) )
# 702 "mnyparse.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "mnyparse.mly"
              ( EIdent (_1) )
# 709 "mnyparse.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'wallet) in
    Obj.repr(
# 101 "mnyparse.mly"
              ( _1 )
# 716 "mnyparse.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 102 "mnyparse.mly"
                           ( _2 )
# 723 "mnyparse.ml"
               : 'atom))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Mnyast.expr)

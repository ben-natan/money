# 1 "mnylex.mll"
 
    open Mnyparse ;;
    exception Eoi ;;

    let initial_string_buffer = Bytes.create 256;;
    let string_buff = ref initial_string_buffer;;
    let string_index = ref 0;;

    let reset_string_buffer () =
        string_buff := initial_string_buffer;
        string_index := 0;;
    
    let get_stored_string () =
        let s = Bytes.to_string (Bytes.sub (!string_buff) 0 (!string_index)) in
        string_buff := initial_string_buffer;
        s;;

    let store_string_char c =
        if !string_index >= Bytes.length (!string_buff) then begin
            let new_buff = Bytes.create (Bytes.length (!string_buff) * 2) in
            Bytes.blit (!string_buff) 0 new_buff 0 (Bytes.length (!string_buff));
            string_buff := new_buff
            end;
        Bytes.unsafe_set (!string_buff) (!string_index) c;
        incr string_index;;

    let char_for_backslash c = match c with
    | 'n' -> '\010'
    | 'r' -> '\013'
    | 'b' -> '\008'
    | 't' -> '\009'
    | c   -> c

    let char_for_decimal_code lexbuf i =
        let c = 100 * (Char.code(Lexing.lexeme_char lexbuf i) - 48) +
                10 * (Char.code(Lexing.lexeme_char lexbuf (i+1)) - 48) +
                    (Char.code(Lexing.lexeme_char lexbuf (i+2)) - 48) in
        if (c < 0 || c > 255)
        then raise (Failure ("Illegal_escape: " ^ (Lexing.lexeme lexbuf)))
        else Char.chr c;;

    let char_for_hexadecimal_code lexbuf i =
        let d1 = Char.code (Lexing.lexeme_char lexbuf i) in
        let val1 = if d1 >= 97 then d1 - 87
                else if d1 >= 65 then d1 - 55
                else d1 - 48
        in
        let d2 = Char.code (Lexing.lexeme_char lexbuf (i+1)) in
        let val2 = if d2 >= 97 then d2 - 87
                else if d2 >= 65 then d2 - 55
                else d2 - 48
        in
        Char.chr (val1 * 16 + val2);;


# 58 "mnylex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\225\255\226\255\004\000\229\255\230\255\231\255\233\255\
    \234\255\235\255\236\255\238\255\001\000\002\000\241\255\242\255\
    \243\255\002\000\245\255\030\000\031\000\032\000\251\255\079\000\
    \156\000\001\000\255\255\166\000\176\000\250\255\247\255\246\255\
    \232\255\240\255\239\255\227\255\224\000\248\255\249\255\002\000\
    \250\255\211\000\255\255\251\255\245\000\221\000\254\255\231\000\
    \253\255\028\001\252\255\160\000\254\255\004\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\027\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\011\000\255\255\007\000\006\000\018\000\255\255\003\000\
    \002\000\000\000\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\
    \255\255\007\000\255\255\255\255\004\000\004\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\037\000\000\000\000\000\255\255\
    \000\000\043\000\000\000\000\000\255\255\255\255\000\000\255\255\
    \000\000\255\255\000\000\052\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\026\000\026\000\040\000\025\000\054\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\021\000\002\000\000\000\000\000\014\000\012\000\034\000\
    \010\000\009\000\016\000\018\000\004\000\017\000\006\000\015\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\005\000\003\000\019\000\022\000\020\000\035\000\
    \032\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\031\000\030\000\029\000\011\000\023\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\008\000\013\000\007\000\033\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\054\000\000\000\000\000\053\000\023\000\000\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\027\000\000\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\040\000\000\000\000\000\039\000\000\000\000\000\
    \000\000\000\000\000\000\046\000\000\000\046\000\000\000\000\000\
    \000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\042\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\000\000\000\000\000\000\000\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\046\000\
    \000\000\000\000\000\000\000\000\000\000\046\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\041\000\000\000\000\000\000\000\
    \000\000\046\000\000\000\000\000\000\000\046\000\000\000\046\000\
    \000\000\000\000\000\000\044\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\000\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\025\000\039\000\000\000\053\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\012\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\019\000\020\000\021\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\013\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\051\000\255\255\255\255\051\000\023\000\255\255\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\024\000\255\255\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\036\000\255\255\255\255\036\000\255\255\255\255\
    \255\255\255\255\255\255\041\000\255\255\041\000\255\255\255\255\
    \255\255\255\255\041\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\036\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\255\255\255\255\255\255\255\255\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\041\000\
    \255\255\255\255\255\255\255\255\255\255\041\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\036\000\255\255\255\255\255\255\
    \255\255\041\000\255\255\255\255\255\255\041\000\255\255\041\000\
    \255\255\255\255\255\255\041\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\255\255\049\000\049\000\049\000\
    \049\000\049\000\049\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\049\000\049\000\049\000\
    \049\000\049\000\049\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \051\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\041\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \036\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec lex lexbuf =
   __ocaml_lex_lex_rec lexbuf 0
and __ocaml_lex_lex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 63 "mnylex.mll"
        ( lex lexbuf )
# 243 "mnylex.ml"

  | 1 ->
let
# 64 "mnylex.mll"
                                   num
# 249 "mnylex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 65 "mnylex.mll"
        ( FLOAT(float_of_string num))
# 253 "mnylex.ml"

  | 2 ->
let
# 66 "mnylex.mll"
                    num
# 259 "mnylex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 67 "mnylex.mll"
        ( FLOAT(float_of_string num))
# 263 "mnylex.ml"

  | 3 ->
let
# 68 "mnylex.mll"
                                                                 lxm
# 269 "mnylex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 69 "mnylex.mll"
        ( match lxm with 
            | "buy" -> BUY
            | "with" -> WITH
            | "through" -> THROUGH
            | "set" -> SET
            | "fun" -> FUN 
            | "wallet" -> WALLET
            | "asset" -> ASSET
            | "transac" -> TRANSAC
            (* | "exch" -> EXCH *)
            | "of" -> OF
            | "rec" -> REC
            | "if" -> IF
            | "then" -> THEN
            | "else" -> ELSE 
            | "true" -> TRUE  | "false" -> FALSE
            | _ -> IDENT(lxm)
        )
# 290 "mnylex.ml"

  | 4 ->
# 87 "mnylex.mll"
             ( EQUAL )
# 295 "mnylex.ml"

  | 5 ->
# 88 "mnylex.mll"
             ( NOTEQUAL )
# 300 "mnylex.ml"

  | 6 ->
# 89 "mnylex.mll"
             ( GREATER )
# 305 "mnylex.ml"

  | 7 ->
# 89 "mnylex.mll"
                                   ( SMALLER )
# 310 "mnylex.ml"

  | 8 ->
# 90 "mnylex.mll"
             ( GREATEREQUAL)
# 315 "mnylex.ml"

  | 9 ->
# 90 "mnylex.mll"
                                        (SMALLEREQUAL)
# 320 "mnylex.ml"

  | 10 ->
# 91 "mnylex.mll"
             ( PLUS )
# 325 "mnylex.ml"

  | 11 ->
# 92 "mnylex.mll"
             ( MINUS )
# 330 "mnylex.ml"

  | 12 ->
# 93 "mnylex.mll"
             ( MULT )
# 335 "mnylex.ml"

  | 13 ->
# 94 "mnylex.mll"
             ( DIV )
# 340 "mnylex.ml"

  | 14 ->
# 95 "mnylex.mll"
             ( PERCENT )
# 345 "mnylex.ml"

  | 15 ->
# 96 "mnylex.mll"
             ( OR )
# 350 "mnylex.ml"

  | 16 ->
# 97 "mnylex.mll"
             ( AND )
# 355 "mnylex.ml"

  | 17 ->
# 98 "mnylex.mll"
             ( XOR )
# 360 "mnylex.ml"

  | 18 ->
# 99 "mnylex.mll"
             ( EXCLAM )
# 365 "mnylex.ml"

  | 19 ->
# 100 "mnylex.mll"
             ( LPAREN )
# 370 "mnylex.ml"

  | 20 ->
# 101 "mnylex.mll"
             ( RPAREN )
# 375 "mnylex.ml"

  | 21 ->
# 102 "mnylex.mll"
             ( LBRACK )
# 380 "mnylex.ml"

  | 22 ->
# 103 "mnylex.mll"
             ( RBRACK )
# 385 "mnylex.ml"

  | 23 ->
# 104 "mnylex.mll"
             ( ARROW )
# 390 "mnylex.ml"

  | 24 ->
# 105 "mnylex.mll"
             ( DOT )
# 395 "mnylex.ml"

  | 25 ->
# 106 "mnylex.mll"
             ( COLON )
# 400 "mnylex.ml"

  | 26 ->
# 107 "mnylex.mll"
             ( COMMA )
# 405 "mnylex.ml"

  | 27 ->
# 108 "mnylex.mll"
             ( SEMICOLON )
# 410 "mnylex.ml"

  | 28 ->
# 109 "mnylex.mll"
             ( TWOSEMICOLONS )
# 415 "mnylex.ml"

  | 29 ->
# 110 "mnylex.mll"
             ( reset_string_buffer(); 
               in_string lexbuf;
               STRING (get_stored_string()) )
# 422 "mnylex.ml"

  | 30 ->
# 113 "mnylex.mll"
             ( raise Eoi )
# 427 "mnylex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_lex_rec lexbuf __ocaml_lex_state

and in_string lexbuf =
   __ocaml_lex_in_string_rec lexbuf 36
and __ocaml_lex_in_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 120 "mnylex.mll"
      ( () )
# 439 "mnylex.ml"

  | 1 ->
# 122 "mnylex.mll"
      ( store_string_char(char_for_backslash(Lexing.lexeme_char lexbuf 1));
        in_string lexbuf )
# 445 "mnylex.ml"

  | 2 ->
# 125 "mnylex.mll"
      ( store_string_char(char_for_decimal_code lexbuf 1);
        in_string lexbuf )
# 451 "mnylex.ml"

  | 3 ->
# 128 "mnylex.mll"
      ( store_string_char(char_for_hexadecimal_code lexbuf 2);
         in_string lexbuf )
# 457 "mnylex.ml"

  | 4 ->
let
# 130 "mnylex.mll"
              chars
# 463 "mnylex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 131 "mnylex.mll"
      ( skip_to_eol lexbuf; raise (Failure("Illegal escape: " ^ chars)) )
# 467 "mnylex.ml"

  | 5 ->
let
# 132 "mnylex.mll"
               s
# 473 "mnylex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 133 "mnylex.mll"
      ( for i = 0 to String.length s - 1 do
          store_string_char s.[i];
        done;
        in_string lexbuf
      )
# 481 "mnylex.ml"

  | 6 ->
# 139 "mnylex.mll"
      ( raise Eoi )
# 486 "mnylex.ml"

  | 7 ->
let
# 140 "mnylex.mll"
         c
# 492 "mnylex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 141 "mnylex.mll"
      ( store_string_char c; in_string lexbuf )
# 496 "mnylex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_in_string_rec lexbuf __ocaml_lex_state

and skip_to_eol lexbuf =
   __ocaml_lex_skip_to_eol_rec lexbuf 51
and __ocaml_lex_skip_to_eol_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 145 "mnylex.mll"
            ( () )
# 508 "mnylex.ml"

  | 1 ->
# 146 "mnylex.mll"
            ( skip_to_eol lexbuf )
# 513 "mnylex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_skip_to_eol_rec lexbuf __ocaml_lex_state

;;

